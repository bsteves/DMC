Module 9: Creating Plots
========================================================
author: Brian Steves 
date: 
autosize: true

Base Plot Function plot()
=========================================================
```{r basic_plot}
xdat <- seq(1,10,by=0.1)
ydat <- sin(xdat)
plot(xdat, ydat)
```

Alternate method using forumula y~x
=======================================
```{r}
plot(ydat~xdat)  
```

lines()
=========================================================

```{r basic_plot_with_lines}
plot(xdat,ydat)
lines(xdat,ydat)
```

Barplot() plots a bar plot.
=========================================================
```{r barplot}
barplot(VADeaths)  # stacked
```
***
```{r}
barplot(VADeaths, beside=TRUE)
```
hist()
=========================================================
```{r histogram}
# 1000 normally random points with a mean of 0 and a SD of 1
x <- rnorm(1000)
hist(x)
```

You can specify the number of breaks.
=========================================================
```{r histogram2}
hist(x,breaks = 5)
```
***
```{R}
hist(x, breaks = 50)
```


hierarchical clustering (hclust).
====================================
```{r hcluster}
hc <- hclust(dist(USArrests), "ave")
plot(hc)
```

par()
============================
pch = symbol, col = color, cex = size.
```{r basic_with_par}
plot(xdat,ydat, col="red", pch=6, cex=5)
```

Titles and axis labels
==============================
```{r basic_with_labels}
plot(xdat,ydat, main="Sine curve",xlab="X Values",ylab="Y Values")
```



ggplot2 package
===============================
The ggplot2 package introduces an entirely different way to plot using the "grammar of graphics".  


Simple gglot() example
================================
```{r ggplot_sine_curve}
library(ggplot2)
dat <- data.frame(xdat, ydat)
p <- ggplot(dat, aes(x=xdat, y=ydat))
p <- p + geom_line()
print(p)

```
Complicated ggplot() example
=================================
```{r ggplot_diamonds}
p <- ggplot(diamonds) # using built in diamond dataset
p + geom_point(aes(x=carat, y=price))
```
***
```{r}
p + geom_point(aes(x=carat, y=price, colour = clarity))
```
***
```{r}
p + geom_point(aes(x=carat, y=price, colour = clarity), alpha = 0.5)
```

Adding a trend line
=======================
```{r ggplot_smooth}
p <- ggplot(mpg, aes(x=displ, y=hwy))
p + geom_point() + geom_smooth(method=lm)
```

Multiple plots using facet_wrap()
====================================

```{r ggplot_facet_wrap}
p <- ggplot(mpg, aes(x=displ, y=hwy)) 
p <- p + geom_point(aes(col=class)) + facet_wrap(~manufacturer)
p
```

ggplot2 themes
=================================
```{r}
p + theme_bw()
```

There are several preset themes and you can even create your own.


Additional Resources
==============================
A ggplot2 cheat sheet  
https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf

ggplot2 documentation site  
http://docs.ggplot2.org/current/index.html

Homework
================================
Make two plots from your data, one using the base plotting and another using ggplot2.  Upload your R script to the d2l dropbox for this module.



